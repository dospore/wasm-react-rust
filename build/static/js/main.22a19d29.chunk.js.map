{"version":3,"sources":["assets/logo.svg","app/Calculator.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","nativeModule","useState","calculateString","setCalculateString","undefined","result","setResult","className","value","onChange","e","target","onClick","r","calculate","App","props","state","showGreet","bind","then","native","setState","this","greet","alert","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,oIC0B5BC,G,MAvBW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC3B,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4BF,wBAASG,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAOA,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,YACb,2BAAOC,MAAON,EAAiBO,SAAU,SAACC,GAAD,OAAOP,EAAmBO,EAAEC,OAAOH,UAC5E,4BAAQI,QATI,WAChB,IAAIC,EAAIb,EAAac,UAAUZ,GAC/BI,EAAUO,KAON,cAEF,yBAAKN,UAAU,UACZF,GAAU,wCAAcA,OC6BlBU,G,8DA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXjB,aAAc,MAGhB,EAAKkB,UAAY,EAAKA,UAAUC,KAAf,gBAPA,E,qDAUnB,WAAqB,IAAD,OAClB,6BAA0BC,MAAK,SAAAC,GAC7B,EAAKC,SAAS,CACZtB,aAAcqB,S,uBAKpB,WACE,IACErB,EACEuB,KAAKN,MADPjB,aAGGA,EAGHA,EAAawB,MAAM,SAFnBC,MAAM,mC,oBAMV,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAAlB,2DAEE,kBAAC,EAAD,CAAYP,aAAcuB,KAAKN,MAAMjB,qB,GApC7B0B,IAAMC,gBCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22a19d29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport './Calculator.css';\n\nexport const Calculator = ({ nativeModule }) => {\n  const [calculateString, setCalculateString] = useState(\"\")\n  const [result, setResult] = useState(undefined)\n\n  const calculate = () => {\n    let r = nativeModule.calculate(calculateString)\n    setResult(r);\n  }\n\n  return (\n    <div className=\"Calculator\">\n      <div className=\"controls\">\n        <input value={calculateString} onChange={(e) => setCalculateString(e.target.value) }/>\n        <button onClick={calculate}>Calculate</button>\n      </div>\n      <div className=\"result\">\n        {result && <div>Result: {result}</div>}\n      </div>\n    </div>\n  )\n\n}\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from './Calculator';\nimport logo from '../assets/logo.svg';\nimport './App.css';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nativeModule: null,\n    };\n\n    this.showGreet = this.showGreet.bind(this);\n  }\n\n  componentDidMount() {\n    import(\"../native/build\").then(native => {\n      this.setState({\n        nativeModule: native,\n      });\n    });\n  }\n\n  showGreet() {\n    const {\n      nativeModule,\n    } = this.state;\n\n    if (!nativeModule) {\n      alert(\"Please try after some time...\");\n    } else {\n      nativeModule.greet(\"Human\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          WebAssembly with Rust and React (Using create-react-app)\n          <Calculator nativeModule={this.state.nativeModule} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}